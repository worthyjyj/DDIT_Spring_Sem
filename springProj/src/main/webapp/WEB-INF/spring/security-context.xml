<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
   xmlns:security="http://www.springframework.org/schema/security"
   xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
      http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
   
   <!-- customAccessDenied를 자바빈(객체)으로 등록함 -->
   <bean id="customAccessDenied" 
   		class="kr.or.ddit.security.CustomAccessDeniedHandler"></bean>
   
   <bean id="customLoginSuccess" class="kr.or.ddit.security.CustomLoginSuccessHandler">
   </bean>
	<!-- 사용자가 정의한 비밀번호 암호화 처리기를 빈으로 등록함  -->   
   <bean id="customPasswordEncoder"
   class="kr.or.ddit.security.CustomNoOpPasswordEncoder">
   </bean>
   <!-- 사용자 정의 사용자 상세 기능 ************-->
   <bean id="customUserDetailsService" 
	class="kr.or.ddit.security.CustomUserDetailsService"></bean>
	<!-- customLogoutSuccessHandler(사용자정의 로그아웃 성공 처리자) -->
	<bean id="customLogoutSuccessHandler"
		class="kr.or.ddit.security.CustomLogoutSuccessHandler"></bean>
   <!-- 스프링 시큐리티에서 제공하는 BCryptPasswordEncoder -->
<!--    <bean id="bcryptPasswordEncoder" -->
<!--    class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"> -->
<!--    </bean> -->
   <!-- xmlns : xml namespace의 약자 
   		Role : 권한(authorization) 
   		permitAll : 누구나 접근 가능 / hasRole : 권한을 갖은자인가?
    -->
   <security:http>
   		<!-- URI 패턴으로 접근 제한을 설정 -->
<!--    		<security:intercept-url pattern="/board/list" access="permitAll" /> -->
<!--    		<security:intercept-url pattern="/board/register"  -->
<!--    								access="hasRole('ROLE_MEMBER')" /> -->
<!--    		<security:intercept-url pattern="/notice/list" access="permitAll" /> -->
<!--    		<security:intercept-url pattern="/notice/register"  -->
<!--    								access="hasRole('ROLE_ADMIN')" /> -->
   		
   		<!-- 폼 기반 인증 기능을 사용 -->
   		<!-- 접근 제한에 걸리면 시큐리티가 기본적으로 제공하는 로그인 페이지로 이동 -->
<!--    		<security:form-login/> -->

		<!-- 사용자가 정의한 로그인 페이지의 URI를 지정함 -->
		<!-- customLoginSuccess를 인증(로그인) 성공 처리자로 지정함 -->
		<security:form-login login-page="/login"
		    authentication-success-handler-ref="customLoginSuccess"
		 />
   		
   		<!-- 
   		로그인이 된 회원 중에 권한이 없을 때.. !!!!!(403에러)
   		아예 로그인 조차 안되는 사람은 따로 처리해야함 
   		접근access 거부denied 처리자handler의 URI를 지정 
   		-->
<!--    		<security:access-denied-handler error-page="/accessError" /> -->

		<!-- 등록한 CustomAccessDeniedHandler를 접근 거부 처리자로 지정함 
		customAccessDenied 객체를 reference(참조-바라본다)함
		-->
		<security:access-denied-handler ref="customAccessDenied" />
		
		<!-- 데이터소스를 지정하고 테이블을 이용해서 기존 로그인 정보를 기록 
		쿠키의 유효시간을 지정함 
		token-validity-seconds : 쿠키의 유효시간(초) 504800 7일
		-->
		<security:remember-me data-source-ref="dataSource" 
		token-validity-seconds="604800" />
		
		
		<!-- 로그아웃 처리를 위한 URI를 지정하고, 로그아웃한 후에 세션을 무효화 함 -->
		<!-- customLogoutSuccessHandler (사용자정의 로그아웃 성공 처리자) 
		JSESSOIN_ID : 웹브라우저(유일한 세션)의 그 유일한 세션값을 쿠키에 담고 있음. 
		-->
		<security:logout logout-url="/logout" invalidate-session="true" 
		   success-handler-ref="customLogoutSuccessHandler" 
		   delete-cookies="remember-me,JSESSION_ID"/>
   		</security:http>
   
   <!-- authentication : 인증(로그인) 
   1) 회원 게시판 (Board)
   		가) 목록("/board/list") : 모두가 접근 가능 
   		나) 등록("/board/register") : 로그인한 회원만 접근 가능 
   2) 공지사항 게시판 (Notice) 
   		가) 목록("/notice/list") : 모두가 접근 가능 
   		나) 등록("/notice/register") : 로그인한 관리자만 접근 가능 
   
      1 회원(USERS)테이블 : USERNAME, PASSWORD, ENABLED
   
      N 권한(AUTH)테이블 : USERNAME, AUTHORIZE
   -->
   <security:authentication-manager>
   		<!-- 지정된 아이디와 패스워드로 로그인이 가능하도록 설정  
   		authentication-provider : 인증(로그인)제공자 
   		-->
   		<security:authentication-provider user-service-ref="customUserDetailsService">
   		<!-- DB를 사용하겠다라는 의미. 데이터 소스(root-context.xml)를 지정. -->
<!--    		<security:jdbc-user-service data-source-ref="dataSource"/> dataSource는 rootcontext에 있음 -->
   		<!-- 사용자가 정의한 비밀번호 암호화 처리기를 지정(암호화를 안쓰겠다라는 의미) -->
   		<security:password-encoder ref="customPasswordEncoder" /> <!-- 암호화 안하고 싶을 때 주석 풀기 -->
		<!--bcryptPasswordEncoder 비밀번호 암호화 처리기를 사용하겠다는 의미   -->
<!-- 		<security:password-encoder ref="bcryptPasswordEncoder"/> -->
<!--    			<security:user-service> -->
   				<!-- 메모리상에 아이디와 패스워드를 지정하고 로그인을 처리함 
   				스프링 시큐리티 5버전부터는 패스워드 암호화 처리기를 반드시 이용해야 함
   				암호화 처리기를 사용하지 않도록 noop 문자열을 비밀번호 앞에 사용함
   				 -->
<!--    				<security:user name="member" password="{noop}1234"  -->
<!--    				authorities="ROLE_MEMBER"/> -->
<!--    				<security:user name="admin" password="{noop}1234"  -->
<!--    				authorities="ROLE_ADMIN"/> -->
<!--    			</security:user-service> -->
   		</security:authentication-provider>
   </security:authentication-manager>
</beans>